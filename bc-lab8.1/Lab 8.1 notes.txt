Codes for index.html file
---------------------------------------
<!DOCTYPE html>
<html>
<head>
    <title>METAMASK CONNECTION</title>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/web3/1.2.7-rc.0/web3.min.js"></script>
    
    <style>
        p{font-size: 14px;
        text-align: left;
        color: #000000e0;
        }
        body {
            background-color: rgb(247, 240, 242);
            font-size: 33px;
            text-align: center;
        }
        button {
            background-color: rgb(211, 241, 231);
            font-size: 30px;
            font-family: Impact, Haettenschweiler, 'Arial Narrow', sans-serif;
        }
        button:hover {
            background-color: rgb(146, 205, 245);
        }
       
    </style>
</head>
<body>
    <br>
       <button onclick="accessToMetamask()">Connect Metamask</button> <br>
    <p id="accountArea"></p>
    <br>
   
    <button onclick="accessToContract()">Connect to Smart Contract</button> <br>
    <p id="contractArea"></p>
    <br>

    <button onclick="readfromContract()">get Data from Contract</button> <br>
   
    <p id ="ownerProduct"></p> 
    <p id="dataArea0"></p> 
    <p id="dataArea1"></p>
    <p id="dataArea2"></p>
    <button id="buy" onclick="BuyerBuyProduct()"> BUY Product</button>
    <br>
    
    <br>
	</div>
    <div id="transactionSection">
        <label for="Pname">Product name:</label><br>
        <input type="text" id="Pname" name="Pname"><br>
        <label for="Pprice">Product price (wei):</label><br>
        <input type="number" id="Pprice" name="Pprice"> <br>
        <button id="submit" onclick="setNewProduct()"> Update Product</button>
    </div>    
        
    <script>
        
        //1- connect metamask
        let account;
                
        
        const accessToMetamask = async () => {
            if(window.ethereum !== "undefined") {
                const accounts = await ethereum.request({ method: "eth_requestAccounts"});
                account = accounts[0];
                document.getElementById("accountArea").innerHTML = account;
            }
        }

         //2- connect to smart contract
         const accessToContract = async () => {
            const ABI = ;
             
	
            const Address = " ";
            window.web3 = await new Web3(window.ethereum); //how to access to smart contract 
            window.contract = await new window.web3.eth.Contract( ABI, Address); //how you create an instance of that contract by using the abi and address  
            document.getElementById("contractArea").innerHTML = "connected to Product smart contract";
        }

        //3-read data from smart contract
        const readfromContract = async () => {
            const data = await window.contract.methods.getInitialProduct().call();
	    document.getElementById("ownerProduct").innerHTML = `Owner Product information:<br> Product Name: ${data[0]},<br> Price(wei): ${data[1]} <br>Owner Address: ${data[2]}`;
            document.getElementById("dataArea0").innerHTML = data[0];
            document.getElementById("dataArea1").innerHTML = data[1];
            document.getElementById("dataArea2").innerHTML = data[2];
        }
	
	//4- buyer buy the product, transfer wei, update the ownership
	const BuyerBuyProduct = async () =>{
		//need to retrieve product data from the contract
		const data = await window.contract.methods.getInitialProduct().call();
		const price = data[1]; 
		const ownerAddress = data[2];
		await window.contract.methods.buyProduct(ownerAddress).send({from: account, value:price });  
	}
	
	//5- set new product- product name and price, owner address				
         const setNewProduct = async () => {
          const ProductName = document.getElementById("Pname").value;
          const ProductPrice = document.getElementById("Pprice").value;
          await window.contract.methods.setProduct(ProductName, ProductPrice).send({from: account });  
		  document.getElementById("Pname").value = "";
		  document.getElementById("Pprice").value= "";
        }
    </script>
        
</body>
</html>
__________________________________________________________________________________________________________________________________________________

Codes for server.js file
------------------------------

const express = require("express");
const path = require("path");
const app = express();

app.get("/", (req, res) => {
    res.sendFile(path.join(__dirname + "/index.html"));
})

const server = app.listen(5000);
const portNumber = server.address().port;
console.log(`port is open on ${portNumber}`);

______________________________________________________

codes for product.sol file
-----------------------------------
//SPDX-License-Identifier: MIT

pragma solidity >=0.8.0 <0.9.0;

contract Product {
    
    string public productName = "Chaw House";
    uint public productPrice = 10 ether;
    address payable public owner;

    constructor() {
        owner = payable(msg.sender);
    }

    address payable public buyer;
 
    //event ProductCreated(string productName, uint productPrice, address payable owner);

    function getInitialProduct() public view returns (string memory, uint, address) {
        return (productName, productPrice, owner);
    }
    
    function setProduct(string memory _productName, uint _price) public {
        //require a valid name
        require(bytes(_productName).length > 0);

        //require a valid price
        require(_price > 0);
        
        productName = _productName;
        productPrice = _price;
        owner = payable(msg.sender);
        //emit ProductCreated(productName, productPrice, owner);

    }

    function buyProduct(address payable _toReceiver) public payable{
        buyer = payable(msg.sender);
        _toReceiver.transfer(msg.value);
        //update the ownership
        owner = buyer;
    }


}